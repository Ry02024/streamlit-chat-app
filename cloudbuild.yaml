# ビルド、プッシュ、デプロイのステップを定義
steps:
  # -----------------------------------------------------
  # Step 1: Docker イメージをビルドする
  # -----------------------------------------------------
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      # -t [IMAGE_PATH]: イメージ名とタグを指定
      # ${_REGION}-docker.pkg.dev : Artifact Registry のホスト名 (リージョンによる)
      # ${PROJECT_ID} : GCPプロジェクトID (Cloud Buildが自動設定)
      # ${_ARTIFACT_REPO} : Artifact Registry のリポジトリ名 (下の置換変数で指定)
      # ${_IMAGE_NAME} : イメージ名 (下の置換変数で指定)
      # $COMMIT_SHA : ビルドトリガーのGitコミットSHA (Cloud Buildが自動設定、一意なタグになる)
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:$COMMIT_SHA'
      # '.' : Dockerfile があるディレクトリ (ビルドコンテキストのルート)
      - '.'
    id: Build # このステップのID (後のwaitForで使用)

  # -----------------------------------------------------
  # Step 2: ビルドしたイメージをArtifact Registryにプッシュする
  # -----------------------------------------------------
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:$COMMIT_SHA'
    waitFor: ['Build'] # 'Build' ステップの完了を待つ
    id: Push # このステップのID

  # -----------------------------------------------------
  # Step 3: コンテナイメージをCloud Runにデプロイする
  # -----------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud # gcloud コマンドを実行
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}' # デプロイするCloud Runサービス名 (置換変数で指定)
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:$COMMIT_SHA' # デプロイするイメージ
      - '--region=${_REGION}' # デプロイ先のリージョン (置換変数で指定)
      - '--service-account=${_SERVICE_ACCOUNT_EMAIL}' # Cloud Run実行サービスアカウント (置換変数で指定)
      - '--platform=managed' # フルマネージドプラットフォームを指定
      - '--allow-unauthenticated' # アプリへの未認証アクセスを許可 (認証はアプリ内で行う)
      # --- ★★★ Secret Managerから環境変数を設定 (推奨) ★★★ ---
      # --update-secrets=[ENV_VAR_NAME]=[SECRET_NAME]:[VERSION],...
      - '--update-secrets=FIREBASE_WEB_CONFIG_JSON=${_SECRET_WEB_CONFIG}:latest,ALLOWED_USERS_STR=${_SECRET_ALLOWED_USERS}:latest'
      # --- (代替案) 環境変数を直接設定 (非推奨) ---
      # - '--set-env-vars=FIREBASE_WEB_CONFIG_JSON=${_ENV_WEB_CONFIG},ALLOWED_USERS_STR=${_ENV_ALLOWED_USERS}'
      # ----------------------------------------------------------
      # 必要に応じて他のオプションを追加
      # 例: メモリとCPU
      # - '--memory=512Mi'
      # - '--cpu=1'
    waitFor: ['Push'] # 'Push' ステップの完了を待つ
    id: Deploy # このステップのID

# ビルドされるイメージを指定 (ログなどに表示される)
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:$COMMIT_SHA'

# ビルド実行時に置換される変数 (デフォルト値)
# gcloud builds submit実行時に --substitutions オプションで上書き可能
substitutions:
  _REGION: 'asia-northeast1' # ★ あなたのGCPリージョンに変更
  _ARTIFACT_REPO: 'streamlit-chat-repo' # ★ あなたのArtifact Registryリポジトリ名に変更
  _IMAGE_NAME: 'streamlit-chat-app' # ★ 任意のイメージ名に変更可能
  _SERVICE_NAME: 'streamlit-chat-app' # ★ あなたのCloud Runサービス名に変更
  _SERVICE_ACCOUNT_EMAIL: 'cloudrun-chat-runner@streamlit-chat-project.iam.gserviceaccount.com' # ★ あなたのCloud Run実行SAのEmailに変更
  # --- Secret Managerのシークレット名 ---
  _SECRET_WEB_CONFIG: 'firebase-web-config-json' # ★ あなたが作成したSecretの名前に変更
  _SECRET_ALLOWED_USERS: 'allowed-users-string' # ★ あなたが作成したSecretの名前に変更
  # --- (代替案) 環境変数直接指定用の値 ---
  # _ENV_WEB_CONFIG: '{"apiKey":"...", ...}' # ここに直接JSON文字列を書く (非推奨)
  # _ENV_ALLOWED_USERS: 'user1@example.com,...' # ここに直接カンマ区切り文字列を書く (非推奨)

# ビルドオプション (任意)
options:
  logging: CLOUD_LOGGING_ONLY # ビルドログをCloud Loggingにのみ送信
  # machineType: 'N1_HIGHCPU_8' # 必要に応じてビルドに使用するマシンタイプを指定
